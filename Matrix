#ifndef MATRIX_H
#define MATRIX_H

#include <vector>
#include <cassert>
#include <cmath>
template<typename Type>
class Matrix {
	private:
	size_t n, m;
	std::vector<std::vector<Type>> a;
	public:
	Matrix(const size_t& __n, const size_t& __m, const Type& x = Type(0)): n(__n), m(__m), a(n, std::vector<Type>(m, x)) {}
	Matrix(const std::vector<std::vector<Type>>& x): n(x.size()), m(x.front().size()), a(x) {}
	Matrix(const Matrix& o): n(o.n), m(o.m), a(o.a) {}
	Matrix& operator = (const Matrix& o) { n = o.n; m = o.m; a = o.a; return *this; }
	Matrix& operator = (const std::vector<std::vector<Type>>& o) { n = o.size(); m = o.front().size(); a = o; return *this; }
	const std::vector<std::vector<Type>>& toVector() { return a; }

	// move
	Matrix(Matrix&& o) noexcept : n(o.n), m(o.m), a(std::move(o.a)) { o.n = o.m = 0; }
	Matrix& operator=(Matrix&& o) noexcept {
		if (this != &o) {
			n = o.n;
			m = o.m;
			a = std::move(o.a);
			o.n = o.m = 0;
		}
		return *this;
	}

	const size_t& getN() const { return n; }
	const size_t& getM() const { return m; }
	void resize(const size_t& __n, const size_t& __m, const Type& x = Type(0)) {
		for (size_t i = 0; i < __n && i < n; i++) {
			a[i].resize(__m, x);
		}
		n = __n, m = __m;
		a.resize(__n, std::vector<Type>(__m, x));
	}
	const Type& operator () (const size_t& row, const size_t& col) const { return a[row][col]; }
	Type& operator () (const size_t& row, const size_t& col) { return a[row][col]; }
	std::vector<Type>& operator [] (const size_t& row) { return a[row]; }
	const std::vector<Type>& operator [] (const size_t& row) const { return a[row]; }
	
	Matrix transpose() const {
		Matrix res(m, n);
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[j][i] = a[i][j];
			}
		}
		return res;
	}
	Matrix& transposeSelf() const {
		Matrix res(m, n);
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[j][i] = a[i][j];
			}
		}
		return *this = std::move(res);
	}

	Matrix& operator *= (const Matrix& o) {
		// assert(m == o.n);
		Matrix res(n, o.m, 0);
		Type tmp;
		for (size_t i = 0; i < n; ++i) {
			for (size_t k = 0; k < m; ++k) {
				tmp = a[i][k];
				for (size_t j = 0; j < o.m; ++j) {			
					res.a[i][j] += tmp * o.a[k][j];
				}
			}
		}
		return *this = std::move(res);
	}
	Matrix operator * (const Matrix& o) const {
		// assert(m == o.n);
		Matrix res(n, o.m, 0);
		Type tmp;
		for (size_t i = 0; i < n; ++i) {
			for (size_t k = 0; k < m; ++k) {
				tmp = a[i][k];
				for (size_t j = 0; j < o.m; ++j) {			
					res.a[i][j] += tmp * o.a[k][j];
				}
			}
		}
		return res;
	}
	Matrix& operator += (const Matrix& o) {
		// assert(n == o.n && m == o.m);
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				a[i][j] += o.a[i][j];
			}
		}
		return *this;
	}
	Matrix operator + (const Matrix& o) const {
		// assert(n == o.n && m == o.m);
		Matrix res = *this;
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[i][j] += o.a[i][j];
			}
		}
		return res;
	}
	Matrix& operator -= (const Matrix& o) {
		// assert(n == o.n && m == o.m);
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				a[i][j] -= o.a[i][j];
			}
		}
		return *this;
	}
	Matrix operator - (const Matrix& o) const {
		// assert(n == o.n && m == o.m);
		Matrix res = *this;
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[i][j] -= o.a[i][j];
			}
		}
		return res;
	}
	Matrix& operator *= (const Type& o) {
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				a[i][j] *= o;
			}
		}
		return *this;
	}
	Matrix operator * (const Type& o) const {
		Matrix res = *this;
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[i][j] *= o;
			}
		}
		return res;
	}
	Matrix& operator += (const Type &o) {
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				a[i][j] += o;
			}
		}
		return *this;
	}
	Matrix operator + (const Type &o) const {
		Matrix res = *this;
		for (size_t i = 0; i < n; ++i) {
			for (size_t j = 0; j < m; ++j) {
				res.a[i][j] += o;
			}
		}
		return res;
	}
	friend std::ostream& operator<<(std::ostream& os, const Matrix& p) {
        for (size_t i = 0; i < p.n; ++i) {
			for (size_t j = 0; j < p.m; ++j) {
				os << p[i][j];
				if (j != p.m - 1) os << ' ';
			}
			if (i != p.n - 1) os << '\n';
		}
        return os;
    }
};

template<typename T,
         T (*Sqrt)(T) = std::sqrt>
class Vector:public std::vector<T> {
public:
	using std::vector<T>::operator[];
	Vector(const size_t& n = 0, const T& x = T(0)): std::vector<T>(n, x) {}
	Vector(const Vector& o): std::vector<T>(o) {}
	Vector(const std::vector<T>& o): std::vector<T>(o) {}
    Vector& operator=(const Vector& o) {
        this->resize(o.size());
        for (size_t i = 0; i < this->size(); i++) {
            operator[](i) = o[i];
        }
        return *this;
    }
	Vector operator+(const Vector& o) const {
		// assert(this->size() == o.size());
		Vector res(*this);
		for (size_t i = 0; i < this->size(); i++) res[i] += o[i];
		return res;
	}
	Vector operator-(const Vector& o) const {
		// assert(this->size() == o.size());
		Vector res(*this);
		for (size_t i = 0; i < this->size(); i++) res[i] -= o[i];
		return res;
	}
	Vector& operator+=(const Vector& o) {
		// assert(this->size() == o.size());
		for (size_t i = 0; i < this->size(); i++) operator[](i) += o[i];
		return *this;
	}
	Vector& operator-=(const Vector& o) {
		// assert(this->size() == o.size());
		for (size_t i = 0; i < this->size(); i++) operator[](i) -= o[i];
		return *this;
	}
	T operator*(const Vector& o) const {
		// assert(this->size() == o.size());
		T res(0);
		for (size_t i = 0; i < this->size(); i++) res += operator[](i) * o[i];
		return res;
	}
	Vector operator*(const T& o) const {
		Vector res(*this);
		for (size_t i = 0; i < res.size(); i++) res[i] *= o;
		return res;
	}
	Vector& operator*=(const T& o) {
		for (size_t i = 0; i < this->size(); i++) operator[](i) *= o;
		return *this;
	}
	Vector operator/(const T& o) const {
		Vector res(*this);
		for (size_t i = 0; i < res.size(); i++) res[i] /= o;
		return res;
	}
	Vector& operator/=(const T& o) {
		for (size_t i = 0; i < this->size(); i++) operator[](i) /= o;
		return *this;
	}
	T length() const {
		T res(0);
		for (size_t i = 0; i < this->size(); i++) {
			res += operator[](i) * operator[](i);
		}
		return Sqrt(res);
	}
	T length2() {
		T res(0);
		for (size_t i = 0; i < this->size(); i++) {
			res += operator[](i) * operator[](i);
		}
		return res;
	}
};

template<typename T,
         T (*Sqrt)(T) = std::sqrt>
Vector<T, Sqrt> operator*(const T& o, const Vector<T, Sqrt>& a) {
	Vector<T, Sqrt> res(a);
	for (size_t i = 0; i < a.size(); i++) res[i] *= o;
	return res;
}

// #include <iostream>
// using namespace std;

// double tt(double x) { return x; }

// int main() {
// 	Vector<double> a(2, 1.5);
// 	a = (double)2 * a;
// 	a[1] = 4;
// 	cout << a * a << endl;
// 	return 0;
// }
#endif
