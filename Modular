#ifndef MODULAR_H
#define MODULAR_H
#include <cassert>
template <typename T, const T MOD, typename MultiplicationType>
class Modular {
private:
    T value;
    T exgcd(const T& a, const T& b, T& x, T& y) const {
        if (b == 0) {
            x = 1, y = 0;
            return a;
        }
        T g = exgcd(b, a % b, y, x);
        y -= static_cast<MultiplicationType>(a / b) * x % MOD;
        if (y < 0) y += MOD;
        if (y >= MOD) y -= MOD;
        return g;
    }
public:
    Modular(const T& v = 0) : value(v % MOD) { if (value < 0) value += MOD; }
    Modular(const Modular& other) : value(other.value) {}
    Modular& operator=(const Modular& other) { value = other.value; return *this; }
    Modular& operator=(const T& v) { value = v % MOD; if (value < 0) value += MOD; return *this; }

    // 强制类型转换
    operator int() const { return static_cast<int>(value); }
    operator long long() const { return static_cast<long long>(value); }
    operator double() const { return static_cast<double>(value); }
    operator float() const { return static_cast<float>(value); }
    operator bool() const { return value != 0; }
    T getVal() const { return value; }
    void setVal(const T& v) { value = v; }
    // 算术运算
    inline Modular operator+(const Modular& other) const { 
        T result = value + other.value; 
        if (result >= MOD) { result -= MOD; } 
        return Modular(result);
    }
    inline Modular operator-(const Modular& other) const { 
        T result = value - other.value; 
        if (result < 0) { result += MOD; }
        return Modular(result);
    }
    inline Modular operator*(const Modular& other) const { 
        return Modular(static_cast<MultiplicationType>(value) * other.value % MOD); 
    }
    inline Modular& operator+=(const Modular& other) { 
        value += other.value; 
        if (value >= MOD) { value -= MOD; } 
        return *this; 
    }
    inline Modular& operator-=(const Modular& other) { 
        value -= other.value; 
        if (value < 0) { value += MOD; } 
        return *this; 
    }
    inline Modular& operator*=(const Modular& other) { 
        value = static_cast<MultiplicationType>(value) * other.value % MOD; 
        return *this; 
    }
    // 快速幂 (unsigned int)
    inline Modular fPow(unsigned int exp) const {
        Modular result(1), base(value);
        while (exp) {
            if (exp & 1) result *= base;
            base *= base;
            exp >>= 1;
        }
        return result;
    }
    // 快速幂 (unsigned long long)
    inline Modular fPow(unsigned long long exp) const {
        Modular result(1), base(value);
        while (exp) {
            if (exp & 1) result *= base;
            base *= base;
            exp >>= 1;
        }
        return result;
    }
    // 快速幂 (int)
    inline Modular fPow(int exp) const {
        Modular result(1), base(value);
        while (exp) {
            if (exp & 1) result *= base;
            base *= base;
            exp >>= 1;
        }
        return result;
    }
    // 快速幂 (long long)
    inline Modular fPow(long long exp) const {
        Modular result(1), base(value);
        while (exp) {
            if (exp & 1) result *= base;
            base *= base;
            exp >>= 1;
        }
        return result;
    }
    // 求逆元
    inline Modular inv() const {
        T x, y;
        T g = exgcd(value, MOD, x, y);
        assert(g == 1);
        return Modular(x);
    }
    inline Modular& invSelf() {
        T x, y;
        T g = exgcd(value, MOD, x, y);
        assert(g == 1);
        value = x;
        return *this;
    }
    // 除法运算
    inline Modular operator/(const Modular& other) const { return *this * other.inv(); }
    inline Modular& operator/=(const Modular& other) { return *this *= other.inv(); }
    // 比较运算
    inline bool operator==(const Modular& other) const { return value == other.value; }
    inline bool operator!=(const Modular& other) const { return value != other.value; }
};

#endif

// # include<iostream>
// using namespace std;
// int main() {
//     Modular<int, 100000, long long> a;
//     a.setVal(3);
//     a.invSelf();
//     auto b = a;
//     b.setVal(3);
//     a *= b;
//     cout << a.val();
//     return 0;
// }