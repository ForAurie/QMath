#ifndef GEOMETRY_H
#define GEOMETRY_H

# include <cmath>
# include <iostream>
namespace Geometry2D {

template<typename T>
class Point {
private:
    T x, y;
public:
    const T& getX() const { return x; }
    const T& getY() const { return y; }
    void setX(const T& __x) { x = __x; }
    void setY(const T& __y) { y = __y; }
    Point(const T& x = 0, const T& y = 0): x(x), y(y) {}
    Point(const Point& o): x(o.x), y(o.y) {}
    Point& operator=(const Point& o) { x = o.x; y = o.y; return *this; }
    Point operator+(const Point& o) const {
        return Point(x + o.x, y + o.y);
    }
    Point operator-(const Point& o) const {
        return Point(x - o.x, y - o.y);
    }
    Point& operator+=(const Point& o) {
        x += o.x;
        y += o.y;
        return *this;
    }
    Point& operator-=(const Point& o) {
        x -= o.x;
        y -= o.y;
        return *this;
    }
    Point operator*(const T& scalar) const {
        return Point(x * scalar, y * scalar);
    }
    Point operator/(const T& scalar) const {
        return Point(x / scalar, y / scalar);
    }
    Point operator-() const {
        return Point(-x, -y);
    }
    Point& operator*=(const T& scalar) {
        x *= scalar;
        y *= scalar;
        return *this;
    }
    Point& operator/=(const T& scalar) {
        x /= scalar;
        y /= scalar;
        return *this;
    }
    T dot(const Point& o) const {
        return x * o.x + y * o.y;
    }
    T cross(const Point& o) const {
        return x * o.y - y * o.x;
    }
    T length() const {
        return std::sqrt(x * x + y * y);
    }
    T length2() const {
        return x * x + y * y;
    }
    Point unit() const {
        const T len = length();
        return Point(x / len, y / len);
    }
    Point rotate(const T& angle) const {
        const T cosA = std::cos(angle);
        const T sinA = std::sin(angle);
        return Point(x * cosA + y * sinA, -x * sinA + y * cosA);
    }
    Point rotate(const T& angle, const Point<T>& center) const {
        const T cosA = std::cos(angle);
        const T sinA = std::sin(angle);
        return Point((x - center.x) * cosA + (y - center.y) * sinA + center.x,
                      -(x - center.x) * sinA + (y - center.y) * cosA + center.y);
    }
    Point& rotateSelf(const T& angle) {
        const T cosA = std::cos(angle);
        const T sinA = std::sin(angle);
        const T x_ = x * cosA + y * sinA;
        y = -x * sinA + y * cosA;
        x = x_;
        return *this;
    }
    Point& rotateSelf(const T& angle, const Point<T>& center) {
        const T cosA = std::cos(angle);
        const T sinA = std::sin(angle);
        const T x_ = (x - center.x) * cosA + (y - center.y) * sinA + center.x;
        y = -(x - center.x) * sinA + (y - center.y) * cosA + center.y;
        x = x_;
        return *this;
    }
    bool operator==(const Point& o) const {
        return x == o.x && y == o.y;
    }
    bool operator!=(const Point& o) const {
        return x != o.x || y != o.y;
    }
    bool operator<(const Point& o) const {
        return x < o.x || (x == o.x && y < o.y);
    }
    bool operator>(const Point& o) const {
        return x > o.x || (x == o.x && y > o.y);
    }
    bool operator<=(const Point& o) const {
        return x < o.x || (x == o.x && y <= o.y);
    }
    bool operator>=(const Point& o) const {
        return x > o.x || (x == o.x && y >= o.y);
    }
    friend std::ostream& operator<<(std::ostream& os, const Point& p) {
        os << '(' << p.x << ", " << p.y << ')';
        return os;
    }
    T cos() {
        return x / length();
    }
    T sin() {
        return y / length();
    }
    T tan() {
        return y / x;
    }
    // friend std::istream& operator>>(std::istream& is, Point& p) {
    //     is >> p.x >> p.y;
    //     return is;
    // }
};

template<typename T>
Point<T> operator*(const T& scalar, const Point<T>& o) {
    return Point(o.x * scalar, o.y * scalar);
}

template<typename T>
using Vector = Point<T>;

// template<typename T>
// class Line {
// public:
//     Point<T> p;
//     Vector<T> a;
//     Line(const Point<T>& p, const Vector<T>& a): p(p), a(a) {}
//     friend std::ostream& operator<<(std::ostream& os, const Line& o) {
//         os << '(' << o.p << ", " << o.a << ')';
//         return os;
//     }
// };

// template<typename T>
// Line<T> makeLine(const Point<T>& p, const Point<T>& q) {
//     return Line<T>(p, q - p);
// }
// template<typename T>
// T sideOfLine(const Line<T>& l, const Point<T>& p) {
//     return l.a.cross(p - l.p);
// }

// template<typename T>
// class Segment {
// public:
//     Point<T> a, b;
//     Segment(const Point<T>& a, const Point<T>& b): a(a), b(b) {}
//     // bool onSegment(const Point<T>& p) const {
//     //     return (p - a).dot(b - a) >= 0 && (p - b).dot(a - b) >= 0;
//     // }
};


#endif